{
  "openapi": "3.0.0",
  "info": {
    "title": "Business Eligibility APIs Specifications",
    "version": "1.0.0",
    "description": "## Introduction\nThere are 2 API service in this group for Business Eligibility APIs. <br/> 1. Dedupe API to check if the corporate customer is ETB or NTB <br/> 2. Customer Eligibility API to check if corporate customer is eligible to onboard<br/>\n## Encryption and Signing\nEncryption and Signing uses JSON Web Tokens (JWT), an open industry standard <a href=\"https://tools.ietf.org/html/rfc7519\">RFC7519</a> method to represent claims securely across two parties.\n### Algorithms\nSCB provides support for the beLow-mentioned algorithms, which are specified in the JOSE Header, as per <a href=\"https://tools.ietf.org/html/rfc7515\">JSON Web Signature</a> (JWS) and <a href=\"https://tools.ietf.org/html/rfc7516#section-4.1.12\">JSON Web Encryption</a> (JWE) Standards.\n <table>\n  <thead>\n    <tr>\n      <th width='25%'>Standard</th>\n      <th width='25%'>Algorithm</th>\n      <th width='70%'>JOSE Header</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>JSON Web Signature (JWS)</td>\n      <td>ES256</td>\n      <td>\n        kid: (key id)\n        cty: JWS\n        alg: ES256\n      </td>\n    </tr>\n    <tr>\n      <td>JSON Web Encryption (JWE)</td>\n      <td>RSA-OAEP-256 (Asymmetric)</td>\n      <td>\n          kid: (key id)\n          cty: JWT\n          alg: RSA-OAEP-256\n      </td>\n    </tr>\n    </tbody>\n</table>\n\n<hr/>\n\n## Guide for JWE and JWS\nAs per SCB API Security standards, SCB uses Compact Serialization for its <a href=\"https://tools.ietf.org/html/rfc7515#section-7.1\">JWS</a>/<a href=\"https://tools.ietf.org/html/rfc7516#section-3.1\">JWE</a> representation. The content to be sent to the client <b>is first signed folLowing JWS specifications</b> and <b>then encrypted and sent as a JWE to the client</b>. Specifics for creating each component are as shown beLow:\n### JSON Web Signature\nThe folLowing describes the structure of our JWS.\n\n**Message** : Content to be sent to client\n\n**JWS Payload** : BASE64URL-ENCODE(Message)\n\n**Signature** : ASCII(BASE64URL-ENCODE(UTF8(JOSE Header))‘.’BASE64URL-ENCODE(JWS Payload))\n\n**Structure** : BASE64URL(UTF8(JOSE Header))‘.’BASE64URL(JWS Payload)‘.’BASE64URL(JWS Signature)\n<hr/>\n\n### JSON Web Encryption\nThe folLowing describes the structure of our JWE. The payload in our JWE is the JWS we have created in the steps above. The JOSE header of JWE contains both symmetric and asymmetric encryptions. Symmetric encryption to encrypt the payload, and assymetric encryption to encrypt the symmetric key. The assymetric keypair belongs to the client who will be receiving the JWE.\n\n**JWE Payload** : JWS Signature (from above)\n\n**JWE Ciphertext** : *ENCRYPT-SYMMETRIC*(JWE Payload)\n\n**JWE Encrypted Key** : *ENCRYPT-ASYMMETRIC*(Symmetric Key) - using client's public key\n\n**Structure** : BASE64URL-ENCODE(UTF8(JWE Header))‘.’BASE64URL-ENCODE(JWE Encrypted Key)‘.’BASE64URL-ENCODE(JWE Initialization Vector)‘.’BASE64URL-ENCODE(JWE Ciphertext)‘.’BASE64URL-ENCODE(JWE Authentication Tag)\n\n## API Response Codes\n\n\n  <table style='border: 0.5px solid; '>\n    <thead>\n      <tr>\n        <th width='5%'>Response Code</th>\n        <th width='40%'>Response Message</th>\n        <th width='10%'>HTTP status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>E001</td>\n        <td>Field is mandatory</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E002</td>\n        <td>Field value not in valid range</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E003</td>\n        <td>Invalid Format</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E004</td>\n        <td>Contains invalid characters</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E005</td>\n        <td>Resource not found</td>\n        <td>404</td>\n      </tr>\n      <tr>\n        <td>E006</td>\n        <td>No unique resource found</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E100</td>\n        <td>Unable to decrypt</td>\n        <td>500</td>\n      </tr>\n      <tr>\n        <td>E101</td>\n        <td>Unable to verify signature</td>\n        <td>500</td>\n      </tr>\n      <tr>\n        <td>E102</td>\n        <td>Unable to decrypt or verify signature</td>\n        <td>500</td>\n      </tr>\n      <tr>\n        <td>E103</td>\n        <td>Unable to encrypt</td>\n        <td>500</td>\n      </tr>\n      <tr>\n        <td>E104</td>\n        <td>Unable to sign</td>\n        <td>500</td>\n      </tr>\n      <tr>\n        <td>E105</td>\n        <td>Unable to encrypt or sign</td>\n        <td>500</td>\n      </tr>\n      <tr>\n        <td>E110</td>\n        <td>Invalid MTLS Cert</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E111</td>\n        <td>Invalid Token Error</td>\n        <td>401</td>\n      </tr>\n      <tr>\n        <td>E112</td>\n        <td>Forbidden</td>\n        <td>403</td>\n      </tr>\n      <tr>\n        <td>E200</td>\n        <td>Downstream System Error</td>\n        <td>500</td>\n      </tr>\n      <tr>\n        <td>E201</td>\n        <td>Internal API Gateway Error</td>\n        <td>500</td>\n      </tr>\n      <tr>\n        <td>E202</td>\n        <td>Timeout Error</td>\n        <td>500</td>\n      </tr>\n      <tr>\n        <td>E300</td>\n        <td>Modify request as message is too large</td>\n        <td>413</td>\n      </tr>\n      <tr>\n        <td>E999</td>\n        <td>Unexpected error occurred</td>\n        <td>500</td>\n      </tr>\n    <tbody>\n  </table>\n"
  },
  "servers": [
    {
      "url": "https://test-api.sc.com",
      "description": "Test Environment."
    },
    {
      "url": "https://api.sc.com",
      "description": "Production Environment."
    }
  ],
  "tags": [
    {
      "name": "Customer Eligibility Enquiry APIs",
      "description": "",
      "x-subcategory": "Business Eligibility APIs"
    },
    {
      "name": "Customer Risk APIs",
      "description": "",
      "x-subcategory": "Business Eligibility APIs"
    }
  ],
  "paths": {
    "/business/{version}/cdd/dedupe": {
      "post": {
        "tags": [
          "Customer Eligibility Enquiry APIs"
        ],
        "description": "Performs deduplication check for a corporate customer to verify if the customer is ETB or NTB.",
        "summary": "Dedupe Check",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token for accessing APIs retreived from the gateway",
            "style": "simple",
            "explode": true,
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "eyJ4NXQiOiJNbU5oTlRnell6RmlNR0kxWldNd05tUTRNV0prWVRBNVpqZzFPREV3TVRJMFpUTmtaRGs0WkEiLCJraWQiOiJNbU5oTlRnell6RmlNR0kxWldNd05tUTRNV0prWVRBNVpqZzFPREV3TVRJMFpUTmtaRGs0WkFfUlMyNTYiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJoa21hdGVzdC1wYXJ0bmVyLXVzZXJAY2FyYm9uLnN1cGVyIiwiYXVkIjoicTJTdWU4V0lvQXRHcnk4VVU4cTFYRTA0NzhBYSIsIm5iZiI6MTY4MTk3MzI2NCwiYXpwIjoicTJTdWU4V0lvQXRHcnk4VVU4cTFYRTA0NzhBYSIsInNjb3BlIjoiT0JSZXRhaWxLWUNfUE9TVCB4NXQjU0hBMjU2OkF4NUNvYk56QzE4Vm9oeDRXQmpQS19hWGV4WU52emtpTXhTMHJZdEZCQXMiLCJpc3MiOiJodHRwczpcL1wvaWRlbnRpdHktc2VydmVyLm9iLWFpci5zdmM6NDQzXC9vYXV0aDJcL3Rva2VuIiwiZXhwIjoxNjgyMDU3ODY0LCJpYXQiOjE2ODE5NzMyNjQsImp0aSI6ImY2NTMwMGY0LTNmZDMtNDk3ZS04NTZlLTE2MjM5NzZmZTM4NSJ9.VjjtG3U3gANuxSGOIMlDB1H1wEsugCD4DPsZp18lrKHv_A_r1KWHkevTHsBYyPLwD6WwFxWrc2MUZEJ6dZfxebMmnHJaok-IaB4gaEVkUF0OFBv1H-2GuW54PfchGA6EKbEf556Gqtcy8Mi-U8RE1VPLhMRYmcBlHZdxRm5XjHaRnQSOdp1vnziOUwyc7Hw0s0NbXibfU6PgDcCnwaAW7ZTP00DIpzFKa4ajFkdvg8IwTuh5qwk9owOFxTRHEQSnGvbBobagUHBdIBuaaM438455Rs4lEZMi9pVVPEYRr3BiU2-nk4MVbFKt4hHDQprdxq7VDQjYFKnfeqmBjyUaQQ"
          },
          {
            "name": "Transaction-Id",
            "in": "header",
            "description": "Unique transaction reference identifier for the API request, for tracking purposes",
            "style": "simple",
            "explode": true,
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 36
            },
            "example": "6bc1371d-f47d-46c5-d769-e1592589c78d"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "IP address which the request originated from, segregated by commas. \\<user ip>, \\<server ip> etc",
            "style": "simple",
            "explode": true,
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            },
            "example": "10.123.123.123, 10.123.45.67"
          },
          {
            "name": "X-Market",
            "in": "header",
            "description": "Indicate the specific Market or Country for which this operation is performed. Value should be a 2-char ISO-3166 country code.",
            "style": "simple",
            "explode": true,
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "IN"
              ]
            },
            "example": "IN"
          },
          {
            "name": "version",
            "in": "path",
            "description": "version of the API",
            "required": true,
            "schema": {
              "type": "string",
              "default": "v1",
              "enum": [
                "v1"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dedupe-request"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/encrypted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful dedupe verification.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dedupe-success"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Errors can be like malformed request syntax, invalid request message parameters etc. Refer to response message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fail-bad-request"
                }
              }
            }
          },
          "403": {
            "description": "Certificate Mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fail-certificate-mismatch"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server / Unexpected Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fail-unexpected"
                }
              }
            }
          }
        },
        "x-markets": "IN"
      }
    },
    "/business/{version}/cdd/customer-eligibility": {
      "get": {
        "tags": [
          "Customer Risk APIs"
        ],
        "description": "Determine whether the specific corporate customer is eligible to onboard based on inputs provided.",
        "summary": "Retrieve corporate customer risk details",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token for accessing APIs retreived from the gateway",
            "style": "simple",
            "explode": true,
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "eyJ4NXQiOiJNbU5oTlRnell6RmlNR0kxWldNd05tUTRNV0prWVRBNVpqZzFPREV3TVRJMFpUTmtaRGs0WkEiLCJraWQiOiJNbU5oTlRnell6RmlNR0kxWldNd05tUTRNV0prWVRBNVpqZzFPREV3TVRJMFpUTmtaRGs0WkFfUlMyNTYiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJoa21hdGVzdC1wYXJ0bmVyLXVzZXJAY2FyYm9uLnN1cGVyIiwiYXVkIjoicTJTdWU4V0lvQXRHcnk4VVU4cTFYRTA0NzhBYSIsIm5iZiI6MTY4MTk3MzI2NCwiYXpwIjoicTJTdWU4V0lvQXRHcnk4VVU4cTFYRTA0NzhBYSIsInNjb3BlIjoiT0JSZXRhaWxLWUNfUE9TVCB4NXQjU0hBMjU2OkF4NUNvYk56QzE4Vm9oeDRXQmpQS19hWGV4WU52emtpTXhTMHJZdEZCQXMiLCJpc3MiOiJodHRwczpcL1wvaWRlbnRpdHktc2VydmVyLm9iLWFpci5zdmM6NDQzXC9vYXV0aDJcL3Rva2VuIiwiZXhwIjoxNjgyMDU3ODY0LCJpYXQiOjE2ODE5NzMyNjQsImp0aSI6ImY2NTMwMGY0LTNmZDMtNDk3ZS04NTZlLTE2MjM5NzZmZTM4NSJ9.VjjtG3U3gANuxSGOIMlDB1H1wEsugCD4DPsZp18lrKHv_A_r1KWHkevTHsBYyPLwD6WwFxWrc2MUZEJ6dZfxebMmnHJaok-IaB4gaEVkUF0OFBv1H-2GuW54PfchGA6EKbEf556Gqtcy8Mi-U8RE1VPLhMRYmcBlHZdxRm5XjHaRnQSOdp1vnziOUwyc7Hw0s0NbXibfU6PgDcCnwaAW7ZTP00DIpzFKa4ajFkdvg8IwTuh5qwk9owOFxTRHEQSnGvbBobagUHBdIBuaaM438455Rs4lEZMi9pVVPEYRr3BiU2-nk4MVbFKt4hHDQprdxq7VDQjYFKnfeqmBjyUaQQ"
          },
          {
            "name": "Transaction-Id",
            "in": "header",
            "description": "Unique transaction reference identifier for the API request, for tracking purposes",
            "style": "simple",
            "explode": true,
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 36
            },
            "example": "6bc1371d-f47d-46c5-d769-e1592589c78d"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "IP address which the request originated from, segregated by commas. \\<user ip>, \\<server ip> etc",
            "style": "simple",
            "explode": true,
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            },
            "example": "10.123.123.123, 10.123.45.67"
          },
          {
            "name": "X-Market",
            "in": "header",
            "description": "Indicate the specific Market or Country for which this operation is performed. Value should be a 2-char ISO-3166 country code.",
            "style": "simple",
            "explode": true,
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "IN"
              ]
            },
            "example": "IN"
          },
          {
            "name": "version",
            "in": "path",
            "description": "version of the API",
            "required": true,
            "schema": {
              "type": "string",
              "default": "v1",
              "enum": [
                "v1"
              ]
            }
          },
          {
            "name": "profile-id",
            "in": "query",
            "description": "Tokenised profile ID of the corporate customer",
            "explode": true,
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "qQ8iwlj6UO9"
          },
          {
            "name": "checks",
            "in": "query",
            "description": "Types of checks to be retrieved. If not provided, the default will be retrieved.\n",
            "explode": false,
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "eea",
                  "cln",
                  "fatca",
                  "crs"
                ]
              },
              "default": "eea"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve customer's eligibility details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer-eligibility-response"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/encrypted"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Errors can be like malformed request syntax, invalid request message parameters etc. Refer to response message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fail-bad-request"
                }
              }
            }
          },
          "403": {
            "description": "Certificate Mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fail-certificate-mismatch"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server / Unexpected Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fail-unexpected"
                }
              }
            }
          }
        },
        "x-markets": "IN"
      }
    }
  },
  "components": {
    "schemas": {
      "encrypted": {
        "type": "string",
        "description": "Encrypted Message base on JWE standard",
        "example": "eyJraWQiOiI0UTVZMDU1V1NHNFFLMTAxNDcxIiwiZW5jIjoiQTI1NkNCQy1IUzUxMiIsImFsZyI6IlJTQS1PQUVQLTI1NiJ9.kuq6D5pf_cSykPcukL2amWBIyvc6lm49wjuX440CWXvPSXzenwroxpNNfIs8NVuh15xQleXfv8tDwBaamepHQHF8K7xr8BkAoyFYRNLxUpkF4PCG1WbhcQrqVQHYpEXOmReqaiOtZcfHAfE67PxP_ajwnEWoSYyTlUuEM1eQZBRUVg5giOTZpYWjjpfF2nvFxJQY36q-8dHt2AWP2OpQuFcO_NnahC2k3n0X-WuuIUhRlXjvOYgv--KuLC49gvMvVEEqQ041eOTn6t3MLr5Nh48FmD4UxzSF3hePr-DUjK-bZltPW0RnMNCdXzbPGF7OjNm9EPQC6aYtCa-EvKDZmw.XxkayMQH5TT3t4W9zuJtDQ.5-hBIs6mKkSilQuLiofNPYVmdVRmFm0VdNt65qL40jtZG62RDvqUcxw5HeWRWUHt9TIg_GtrLAdVuvt2V0avgqRBeIOj84n5Nx_qphCN1846Dhv-73F5qculYBjdMSFdQoOwmcbIOJKtuF1klRJvIoDc2ebFtkb7YKmrcwDnlBueB-lIDn8G3UcowS9x9z1Cxq4UpkYJjRy-Ak4WuROrJvfHEUpvD7Q7jibIhstKS9oz4kxA5Vc5bzqlRmmjGRn0OiCUeDnUOEwZvCtSG-5WM5W71KI_bUHF9bGNd37-RlRnCsgt0i1ApiNwiI3kOVuHw0nt1bgY5XvXuf5VVjj1dc60yQLPl_VS7I17CgILzRLPS8uFQ8NPrJITGjmZEAvIR7dOxXa16PzRmJUKEE6ioxbKrdnsG1bZqugtx52GCk0gveXtwyH6zH-8h0t9QUdmwtZamZVkjEJlVuPU1SBrrwtHe1CTW9XNIVUMSuIBe_uvF0rcm4k5Jp98gy5ecsI3r81BJn30uLV3Hk4HGoHJ1Hrza9A6q0nEEqQ-XqfSXQEUBVuS8PmQRUIe409isnwdJIQHP3SehVt2nRufh9bDfQ.Yw3C1zME5UShNGZ7oa8eN-Cg3SeM0dKxRWObZwaHdWk"
      },
      "signed": {
        "type": "string",
        "description": "Signed Message base on JWS standard",
        "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJhY2Nlc3MtdG9rZW4iOiIxYWFmN2Y0OC00NGRhLTQ5OWUtYmRmMi04OWQ2ZDlkYzM5NzcifQ.eZubyvKstz8lYmAVCfQnAUZ8k4IO6JU0tn8vvZNLWDdXKthA-K0UkQ6GnoURpruoFr4QD7Cy_8uRMBEigm1BSQ"
      },
      "dedupe-request": {
        "type": "object",
        "properties": {
          "first-name": {
            "type": "string",
            "description": "First Name of the customer.",
            "example": "Priya",
            "maxLength": 35
          },
          "middle-name": {
            "type": "string",
            "description": "Middle Name of the customer.",
            "example": "Singh",
            "maxLength": 35
          },
          "last-name": {
            "type": "string",
            "description": "Last Name of the customer.",
            "example": "Gupta",
            "maxLength": 35
          },
          "full-name": {
            "type": "string",
            "description": "Full Name of the customer.",
            "example": "Priya Singh Gupta",
            "maxLength": 110
          },
          "date-of-birth": {
            "type": "string",
            "description": "Customer's date of birth in YYYY-MM-DD format only.",
            "example": "1990-01-01",
            "maxLength": 10
          },
          "applicant-identity": {
            "type": "array",
            "description": "Customer's identification details",
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "id-type": {
                  "type": "string",
                  "description": "Customer's identification document type <table style='border: 0.5px solid; '>\n  <thead>\n    <tr>\n      <th width='10%'>Code</th>\n      <th width='90%'>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr><td>BCM</td><td>Birth Certificate for Minors</td></tr>\n    <tr><td>BSB</td><td>BSDBA document</td></tr>\n    <tr><td>DVL</td><td>Driving license</td></tr>\n    <tr><td>EID</td><td>ID Card issued by Electoral Office</td></tr>\n    <tr><td>EMD</td><td>EMIRATES ID</td></tr>\n    <tr><td>ETD</td><td>Entity Tax Declaration Form - FATCA</td></tr>\n    <tr><td>FPT</td><td>FOREIGN PASSPORT</td></tr>\n    <tr><td>GID</td><td>Govt Issued Identification</td></tr>\n    <tr><td>ICF</td><td>IDENTITY CARD ISSUED BY AGENCY OF FOREIGN JURISDIC</td></tr>\n    <tr><td>ICO</td><td>IDENTITY CARD (OTHER NATIONALITY)</td></tr>\n    <tr><td>IPN</td><td>IDENTITY CARD (OTHER NATIONALITY)</td></tr>\n    <tr><td>MSH</td><td>MARK SHEET</td></tr>\n    <tr><td>NID</td><td>National Identification Card</td></tr>\n    <tr><td>NRG</td><td>NREGA</td></tr>\n    <tr><td>PAN</td><td>Permanent Account Number</td></tr>\n    <tr><td>PCE</td><td>PASSING CERTIFICATE</td></tr>\n    <tr><td>PST</td><td>Passport</td></tr>\n    <tr><td>SLC</td><td>SCHOOL LEAVING CERTIFCATE</td></tr>\n    <tr><td>TCE</td><td>TRANSFER CERTIFICATE</td></tr>\n    <tr><td>VOI</td><td>VOTERS ID</td></tr>\n  </tbody>\n</table>",
                  "example": "PST",
                  "minLength": 3,
                  "maxLength": 3
                },
                "id-value": {
                  "type": "string",
                  "description": "Document Number or National ID number. Only alphanumeric allowed",
                  "example": "E1234567G",
                  "minLength": 5,
                  "maxLength": 35
                }
              }
            }
          },
          "mobile-number": {
            "type": "string",
            "description": "Customer's Mobile Number without country code.",
            "example": "9214723912",
            "minLength": 6,
            "maxLength": 150
          },
          "mobile-country-code": {
            "type": "string",
            "description": "Country code of customer's mobile number",
            "example": "91",
            "minLength": 1,
            "maxLength": 3
          },
          "email": {
            "type": "string",
            "description": "Customer's Email",
            "example": "priya@gmail.com",
            "maxLength": 150
          }
        },
        "required": [
          "first-name",
          "last-name",
          "date-of-birth",
          "mobile-country-code",
          "mobile-number",
          "applicant-identity",
          "id-type",
          "id-value"
        ]
      },
      "dedupe-success": {
        "type": "object",
        "properties": {
          "existing-customer": {
            "description": "Denotes whether the applicant is an existing bank customer",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "example": "N"
          }
        }
      },
      "customer-eligibility-response": {
        "type": "object",
        "description": "Retrieve customer's eligibility details",
        "properties": {
          "profile-id": {
            "type": "string",
            "description": "Tokenised profile ID of the corporate customer",
            "maxLength": 20,
            "example": "qQ8iwlj6UO9"
          },
          "fatca-allow": {
            "type": "string",
            "description": "FATCA Allow Flag to determine if customer is eligible to perform any subscription activities.",
            "enum": [
              "Allow",
              "Block"
            ],
            "maxLength": 5,
            "example": "Allow"
          },
          "eea-status": {
            "type": "string",
            "description": "EEA Status Flag to indicate if the customer is a resident in EEA  <br/> <table style='border: 0.5px solid'>\n  <thead>\n    <tr>\n      <th width='10%'>Code</th>\n      <th width='90%'>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Y</td>\n      <td>Customer is a resident in EEA</td>\n    </tr>\n    <tr>\n      <td>N</td>\n      <td>Customer is not a resident in EEA</td>\n    </tr>\n  </tbody>\n</table>",
            "enum": [
              "Y",
              "N"
            ],
            "maxLength": 1,
            "example": "N"
          },
          "crs-status": {
            "type": "string",
            "description": "CRS Status Flag to indicate if the customer is CRS compliant.  <br/>",
            "enum": [
              "Expired",
              "Present",
              "NA"
            ],
            "maxLength": 7,
            "example": "Expired"
          }
        }
      },
      "error": {
        "description": "Error object details",
        "title": "error",
        "required": [
          "id",
          "code",
          "detail"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The transaction id from the request header, if the transaction id was not present in the request header, a generated random UUID will shown here for tracking purposes.",
            "type": "string"
          },
          "code": {
            "description": "An application-specific error code",
            "type": "string"
          },
          "detail": {
            "description": "A human-readable explanation specific to this occurrence of the problem",
            "type": "string"
          },
          "source": {
            "description": "Source of the error - denotes the name of parameter name causing the problem",
            "type": "string"
          }
        },
        "example": {
          "id": "1234",
          "code": "E001",
          "detail": "Field is mandatory",
          "source": "first-name"
        }
      },
      "errors": {
        "description": "List of error object",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/error"
        }
      },
      "fail-bad-request": {
        "$ref": "#/components/schemas/errors"
      },
      "fail-certificate-mismatch": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Certificate used in API call did not match",
            "example": "Certificate mismatch"
          }
        }
      },
      "fail-unexpected": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the transaction-id from the request header"
          },
          "code": {
            "type": "string",
            "description": "Response Code. Refer to Response Code Table for list of responses."
          },
          "detail": {
            "type": "string",
            "description": "Details of the error.",
            "example": "Unexpected error occurred"
          }
        },
        "example": {
          "id": "86c1d522-efab-479c-9c4a-d51f1c3152d8",
          "code": "E005",
          "detail": "Unexpected error occurred"
        }
      },
      "fail-notfound": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the transaction-id from the request header"
          },
          "code": {
            "type": "string",
            "description": "Response Code.Refer to Response Code Table for list of responses."
          },
          "detail": {
            "type": "string",
            "description": "Details of the error"
          }
        },
        "example": {
          "id": "75c1d522-efab-473d-9c4a-d51f1c3152d8",
          "code": "E005",
          "detail": "Resource not found"
        }
      }
    }
  }
}