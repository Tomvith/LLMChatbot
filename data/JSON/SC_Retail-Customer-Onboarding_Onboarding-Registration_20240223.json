{
  "openapi": "3.0.0",
  "info": {
    "title": "Onboarding - User Registration",
    "version": "1.0.10",
    "description": "\n## Introduction\n\nBefore onboarding a potential SCB customer onto a product, some customer information can be processed/prepopulated before bringing the customer into the onboarding journey. This API will allow consumer to pre-store information in SCB and a token will be passed back. This token will be recognisable by SCB onboarding pages to retrieve the pre-stored information.. The operations and the features supported in this API are described in the following sections.\n\n<hr />\n\n## Encryption and Signing\n\nEncryption and Signing uses JSON Web Tokens (JWT), an open industry standard\n<a href=\"https://tools.ietf.org/html/rfc7519\">RFC7519</a> method to\nrepresent claims securely across two parties.\n\n<hr />\n\n### Algorithms\n\nSCB provides support for the below-mentioned algorithms, which are specified\nin the JOSE Header, as per <a href=\"https://tools.ietf.org/html/rfc7515\">JSON Web Signature</a> (JWS) and\n<a href=\"https://tools.ietf.org/html/rfc7516#section-4.1.12\">JSON Web\nEncryption</a> (JWE) Standards.\n <table>\n  <thead>\n    <tr>\n      <th width='25%'>Standard</th>\n      <th width='25%'>Algorithm</th>\n      <th width='70%'>JOSE Header</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>JSON Web Signature (JWS)</td>\n      <td>PS256, ES256 </td>\n      <td>\n        kid: (key id)\n        cty: JWS\n        alg: ES256\n      </td>\n    </tr>\n    <tr>\n      <td>JSON Web Encryption (JWE)</td>\n      <td>RSA-OAEP-256 (Asymmetric), A256CBC-HS512 (Symmetric)</td>\n      <td>\n          kid: (key id)\n          cty: JWT\n          alg: RSA-OAEP-256\n          enc: A256CBC-HS512\n      </td>\n    </tr>\n    </tbody>\n</table>\n\n\n<hr/>\n\n\n## Guide for JWE and JWS\n\nAs per SCB API Security standards, SCB uses Compact Serialization for its <a href=\"https://tools.ietf.org/html/rfc7515#section-7.1\">JWS</a>/<a href=\"https://tools.ietf.org/html/rfc7516#section-3.1\">\nJWE</a>representation. The content to be sent to the client <b>is first signed following JWS specifications</b> and <b>then encrypted and sent as a JWE to\nthe client</b>. Specifics for creating each component are as shown below:\n\n### JSON Web Signature\n\nThe following describes the structure of our JWS.\n\n\n**Message** : Content to be sent to client\n\n\n**JWS Payload** : BASE64URL-ENCODE(Message)\n\n\n**Signature** : ASCII(BASE64URL-ENCODE(UTF8(JOSE\nHeader))‘.’BASE64URL-ENCODE(JWS Payload))\n\n\n**Structure** : BASE64URL(UTF8(JOSE Header))‘.’BASE64URL(JWS\nPayload)‘.’BASE64URL(JWS Signature)\n\n<hr/>\n\n\n### JSON Web Encryption\n\nThe following describes the structure of our JWE. The payload in our JWE is\nthe JWS we have created in the steps above. The JOSE header of JWE contains\nboth symmetric and asymmetric encryptions. Symmetric encryption to encrypt\nthe payload, and assymetric encryption to encrypt the symmetric key. The\nassymetric keypair belongs to the client who will be receiving the JWE.\n\n\n**JWE Payload** : JWS Signature (from above)\n\n\n**JWE Ciphertext** : *ENCRYPT-SYMMETRIC*(JWE Payload)\n\n\n**JWE Encrypted Key** : *ENCRYPT-ASYMMETRIC*(Symmetric Key) - using client's\npublic key\n\n\n**Structure** : BASE64URL-ENCODE(UTF8(JWE Header))‘.’BASE64URL-ENCODE(JWE\nEncrypted Key)‘.’BASE64URL-ENCODE(JWE Initialization\nVector)‘.’BASE64URL-ENCODE(JWE Ciphertext)‘.’BASE64URL-ENCODE(JWE\nAuthentication Tag)\n\n\n## API Response Codes\n\n\n  <table style='border: 0.5px solid; '>\n    <thead>\n      <tr>\n        <th width='5%'>Registration Response Code</th>\n        <th width='40%'>Registration Response Message</th>\n        <th width='10%'>HTTP status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>E001</td>\n        <td>Field is mandatory</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E002</td>\n        <td>Field value not in valid range</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E003</td>\n        <td>Invalid Data</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E004</td>\n        <td>Invalid Format</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E005</td>\n        <td>Unexpected error occurred</td>\n        <td>500</td>\n      </tr>\n      <tr>\n        <td>E006</td>\n        <td>Contains invalid characters</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E007</td>\n        <td>Decryption error</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E008</td>\n        <td>Signature error</td>\n        <td>400</td>\n      </tr>\n      <tr>\n        <td>E009</td>\n        <td>Product not found</td>\n        <td>404</td>\n      </tr>\n    <tbody>\n  </table>\n"
  },
  "servers": [
    {
      "url": "https://api.sc.com/retail/{version}/onboarding",
      "description": "Production Environment",
      "variables": {
        "version": {
          "description": "The Open API endpoints are accessible via https only",
          "enum": [
            "v1"
          ],
          "default": "v1"
        }
      }
    },
    {
      "url": "https://test-api.sc.com/retail/{version}/onboarding",
      "description": "Test Environment",
      "variables": {
        "version": {
          "description": "The Open API endpoints are accessible via https only",
          "enum": [
            "v1"
          ],
          "default": "v1"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Onboarding Registration",
      "description": "Registration of Partner's User for Onboarding",
      "x-subcategory": "Retail Customer Onboarding"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Onboarding",
      "tags": [
        "Registration"
      ]
    }
  ],
  "paths": {
    "/registration": {
      "post": {
        "tags": [
          "Onboarding Registration"
        ],
        "description": "Register an Applicant for Onboarding & other journeys from an API Partner.",
        "x-markets": "HK",
        "summary": "Onboarding Registration for an Applicant from Partner side.",
        "operationId": "onboardingRegistrationUsingPOST",
        "parameters": [
          {
            "name": "requestId",
            "in": "header",
            "description": "Unique transaction reference identifier for the API request, for tracking purposes",
            "style": "simple",
            "explode": true,
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 36
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "IP address which the request originated from, segregated by commas. \\<user ip>, \\<server ip> etc",
            "style": "simple",
            "explode": true,
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            },
            "example": "10.123.123.123, 10.123.45.67"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/encrypted"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful enquire and registration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registration-success"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/signed"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Errors can be like malformed request syntax, invalid request message parameters etc. Refer to response message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registration-fail-bad-request"
                }
              }
            }
          },
          "403": {
            "description": "Certificate Mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registration-fail-certificate-mismatch"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registration-fail-not-found"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. User has sent too many registration requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registration-fail-too-many-requests"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server / Unexpected Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registration-fail-unexpected"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "encrypted": {
        "type": "string",
        "example": "eyJraWQiOiI0UTVZMDU1V1NHNFFLMTAxNDcxIiwiZW5jIjoiQTI1NkNCQy1IUzUxMiIsImFsZyI6IlJTQS1PQUVQLTI1NiJ9.kuq6D5pf_cSykPcukL2amWBIyvc6lm49wjuX440CWXvPSXzenwroxpNNfIs8NVuh15xQleXfv8tDwBaamepHQHF8K7xr8BkAoyFYRNLxUpkF4PCG1WbhcQrqVQHYpEXOmReqaiOtZcfHAfE67PxP_ajwnEWoSYyTlUuEM1eQZBRUVg5giOTZpYWjjpfF2nvFxJQY36q-8dHt2AWP2OpQuFcO_NnahC2k3n0X-WuuIUhRlXjvOYgv--KuLC49gvMvVEEqQ041eOTn6t3MLr5Nh48FmD4UxzSF3hePr-DUjK-bZltPW0RnMNCdXzbPGF7OjNm9EPQC6aYtCa-EvKDZmw.XxkayMQH5TT3t4W9zuJtDQ.5-hBIs6mKkSilQuLiofNPYVmdVRmFm0VdNt65qL40jtZG62RDvqUcxw5HeWRWUHt9TIg_GtrLAdVuvt2V0avgqRBeIOj84n5Nx_qphCN1846Dhv-73F5qculYBjdMSFdQoOwmcbIOJKtuF1klRJvIoDc2ebFtkb7YKmrcwDnlBueB-lIDn8G3UcowS9x9z1Cxq4UpkYJjRy-Ak4WuROrJvfHEUpvD7Q7jibIhstKS9oz4kxA5Vc5bzqlRmmjGRn0OiCUeDnUOEwZvCtSG-5WM5W71KI_bUHF9bGNd37-RlRnCsgt0i1ApiNwiI3kOVuHw0nt1bgY5XvXuf5VVjj1dc60yQLPl_VS7I17CgILzRLPS8uFQ8NPrJITGjmZEAvIR7dOxXa16PzRmJUKEE6ioxbKrdnsG1bZqugtx52GCk0gveXtwyH6zH-8h0t9QUdmwtZamZVkjEJlVuPU1SBrrwtHe1CTW9XNIVUMSuIBe_uvF0rcm4k5Jp98gy5ecsI3r81BJn30uLV3Hk4HGoHJ1Hrza9A6q0nEEqQ-XqfSXQEUBVuS8PmQRUIe409isnwdJIQHP3SehVt2nRufh9bDfQ.Yw3C1zME5UShNGZ7oa8eN-Cg3SeM0dKxRWObZwaHdWk",
        "description": "Encrypted Message base on JWE standard"
      },
      "signed": {
        "type": "string",
        "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJhY2Nlc3MtdG9rZW4iOiIxYWFmN2Y0OC00NGRhLTQ5OWUtYmRmMi04OWQ2ZDlkYzM5NzcifQ.eZubyvKstz8lYmAVCfQnAUZ8k4IO6JU0tn8vvZNLWDdXKthA-K0UkQ6GnoURpruoFr4QD7Cy_8uRMBEigm1BSQ",
        "description": "Signed Message base on JWS standard"
      },
      "registration": {
        "type": "object",
        "properties": {
          "applicant-identity": {
            "type": "array",
            "description": "Identity details of the Applicant for registration. It can be one of the acceptable identity types listed below.",
            "items": {
              "$ref": "#/components/schemas/applicant-id"
            }
          },
          "last-name": {
            "type": "string",
            "description": "Last name of the customer as per the identity document",
            "maxLength": 40
          },
          "first-name": {
            "type": "string",
            "description": "First name of the customer as per the identity document",
            "maxLength": 26
          },
          "gender": {
            "type": "string",
            "description": "Gender of the customer",
            "maxLength": 1
          },
          "mobile-number": {
            "type": "string",
            "description": "Mobile Number of customer",
            "maxLength": 32,
            "example": "+852 1234 4321"
          },
          "dob": {
            "type": "string",
            "description": "Date of birth of customer in the format of yyyy-MM-dd",
            "format": "date",
            "maxLength": 28,
            "example": "1999-12-31"
          },
          "email": {
            "type": "string",
            "description": "Email of customer",
            "maxLength": 32,
            "example": "john.smith@example.com"
          },
          "addresses": {
            "type": "array",
            "description": "List of addresses provided by the customer",
            "items": {
              "$ref": "#/components/schemas/address"
            }
          },
          "nationality": {
            "type": "array",
            "description": "Nationalities of the customer",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "maxItems": 5
          },
          "education-level": {
            "type": "string",
            "description": "Highest qualification of the customer",
            "maxLength": 3
          },
          "annual-income": {
            "type": "number",
            "description": "Annual income of the customer upto two decimal places",
            "format": "double",
            "example": 45678
          },
          "membership-detail": {
            "type": "object",
            "properties": {
              "membership-number": {
                "type": "string",
                "description": "Membership number of the customer",
                "maxLength": 10
              },
              "last-name": {
                "type": "string",
                "description": "Last name of the customer as registered with the memebership partner",
                "maxLength": 40
              },
              "first-name": {
                "type": "string",
                "description": "First name of the customer as registered with the membership partner",
                "maxLength": 26
              }
            }
          },
          "tsp-user-id": {
            "type": "string",
            "description": "User's profile ID on partner platform",
            "maxLength": 32,
            "example": "user123"
          }
        }
      },
      "applicant-id": {
        "type": "object",
        "properties": {
          "id-type": {
            "description": "Type of the User identifier. It can be a National id, Passport or other identifiers allowed in the list.",
            "type": "string",
            "enum": [
              "NATIONALID",
              "PASSPORT",
              "TAXID",
              "PRODNUM",
              "PRODTOKEN"
            ]
          },
          "id-value": {
            "description": "Value of the identifier",
            "type": "string",
            "maxLength": 32,
            "example": "H1234567(8)"
          },
          "id-issuer": {
            "description": "Issuer of this identifier. Set it as 2-character ISO Country code for Government issued identifiers and as SCB for Bank issued identifier.",
            "type": "string",
            "maxLength": 4,
            "example": "HK"
          }
        }
      },
      "addresses": {
        "type": "array",
        "description": "List of addresses provided by the customer",
        "items": {
          "$ref": "#/components/schemas/address"
        }
      },
      "address": {
        "type": "object",
        "description": "Address detail of the applicant",
        "properties": {
          "is-mailing-address": {
            "type": "string",
            "description": "Flag to indicate whether this address can be used as mailing address. Only one address can be marked as 'Y'",
            "enum": [
              "Y",
              "N"
            ]
          },
          "type": {
            "type": "string",
            "description": "Type of address of the customer",
            "enum": [
              "RES",
              "OFF"
            ]
          },
          "flat-number": {
            "type": "string",
            "description": "Flat number for this address. Special words like \"FLAT/FLT, BLOCK/BLK, ROOM/RM, FLOOR/FLR , LEVEL/LV, HOUSE/HSE, APT/SUITE, BOX/GPO\" should not be part of the value",
            "maxLength": 5
          },
          "floor-number": {
            "type": "string",
            "description": "Floor number for this address. Special words like \"FLAT/FLT, BLOCK/BLK, ROOM/RM, FLOOR/FLR , LEVEL/LV, HOUSE/HSE, APT/SUITE, BOX/GPO\" should not be part of the value",
            "maxLength": 5
          },
          "block-number": {
            "type": "string",
            "description": "Block number for this address. Special words like \"FLAT/FLT, BLOCK/BLK, ROOM/RM, FLOOR/FLR , LEVEL/LV, HOUSE/HSE, APT/SUITE, BOX/GPO\" should not be part of the value",
            "maxLength": 5
          },
          "building": {
            "type": "string",
            "description": "Building related detail for this address",
            "maxLength": 30
          },
          "street-name": {
            "type": "string",
            "description": "Street name for this address",
            "maxLength": 30
          },
          "street-number": {
            "type": "string",
            "description": "Street number for this address",
            "maxLength": 30
          },
          "district": {
            "type": "string",
            "description": "District related detail for this address",
            "maxLength": 30
          },
          "country": {
            "type": "string",
            "description": "Country name to which this address belong",
            "maxLength": 10
          },
          "region": {
            "type": "string",
            "description": "Conditional mandatory. To be provided only in case the \"country\" field value is \"Hong Kong\"",
            "enum": [
              "Hong Kong",
              "Kowloon",
              "New Territories"
            ]
          },
          "telephone-number": {
            "type": "string",
            "description": "Telephone number for this address"
          }
        }
      },
      "registration-success": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Customer's onboarding status. Values can be NEW or EXISTING",
            "type": "string",
            "enum": [
              "NEW",
              "EXISTING"
            ],
            "example": "NEW"
          },
          "access-token": {
            "description": "SCB access token",
            "type": "string",
            "maxLength": 36,
            "example": "ddd377de-07fd-4946-8fae-e43989a8cab7"
          }
        },
        "example": {
          "status": "NEW",
          "access-token": "ddd377de-07fd-4946-8fae-e43989a8cab7"
        }
      },
      "registration-fail-bad-request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the transaction-id from the request header"
          },
          "code": {
            "type": "string",
            "description": "Response Code. Refer to Response Code Table for list of responses."
          },
          "detail": {
            "type": "string",
            "description": "Details of the error. It follows the format [<date-time>]<error-details-text>. Message timestamp is in UTC"
          }
        },
        "example": {
          "id": "1234",
          "code": "E001",
          "detail": "[2017-05-02T13:00:00.000] document-id is required"
        }
      },
      "registration-fail-certificate-mismatch": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Certificate used in API call did not match",
            "example": "Certificate mismatch"
          }
        }
      },
      "registration-fail-not-found": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the transaction-id from the request header"
          },
          "code": {
            "type": "string",
            "description": "Response Code. Refer to Response Code Table for list of responses."
          },
          "detail": {
            "type": "string",
            "description": "Details of the error. It follows the format [<date-time>]<error-details-text>. Message timestamp is in UTC",
            "example": "[2017-05-02T13:00:00.000] Account number not found"
          }
        },
        "example": {
          "id": "1234",
          "code": "E009",
          "detail": "[2017-05-02T13:00:00.000] Product not found"
        }
      },
      "registration-fail-too-many-requests": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Defined rate limit for min/hr/day has exceeded.",
            "example": "API rate limit exceeded"
          }
        }
      },
      "registration-fail-unexpected": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the transaction-id from the request header"
          },
          "code": {
            "type": "string",
            "description": "Response Code. Refer to Response Code Table for list of responses."
          },
          "detail": {
            "type": "string",
            "description": "Details of the error. It follows the format [<date-time>]<error-details-text>. Message timestamp is in UTC",
            "example": "[2017-05-02T13:00:00.000] Unexpected error occurred"
          }
        },
        "example": {
          "id": "1234",
          "code": "E005",
          "detail": "[2017-05-02T13:00:00.000] Unexpected error occurred"
        }
      }
    }
  }
}